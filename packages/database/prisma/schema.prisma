// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id") @db.Uuid
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @map("updated_at")
  image         String?
  accounts      Account[]
  sessions      Session[]

  profile Profile?

  @@map("users")
}

model Image {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  url          String   @unique
  width        Int
  height       Int
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")
  caption      String?
  coverForId   String?  @unique @map("cover_for_id") @db.Uuid
  previewForId String?  @map("preview_for_id") @db.Uuid
  publisherId  String?  @unique @map("publisher_id") @db.Uuid

  // Prisma doesn't support polymorphic relations yet so some of these will always be null
  coverFor   Book?      @relation("cover_for", fields: [coverForId], references: [id])
  previewFor Book?      @relation("preview_for", fields: [previewForId], references: [id])
  publisher  Publisher? @relation("publisher_logo", fields: [publisherId], references: [id])

  @@map("images")
}

model Profile {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  userId    String?  @unique @map("user_id") @db.Uuid
  name      String
  location  String?
  website   String?
  instagram String?
  slug      String   @unique

  jobs          Job[]          @relation("profiles_jobs")
  user          User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  contributions Contribution[]

  @@map("profiles")
}

model Job {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  name      String   @unique

  profiles      Profile[]      @relation("profiles_jobs")
  contributions Contribution[]

  @@map("jobs")
}

model Contribution {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  profileId String   @map("profile_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  bookId    String   @map("book_id") @db.Uuid
  jobId     String   @map("job_id") @db.Uuid

  job     Job     @relation(fields: [jobId], references: [id])
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  book    Book    @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@map("contributions")
}

model Link {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  bookId    String   @map("book_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  url       String
  site      String

  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@map("links")
}

model Book {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")
  title       String
  subtitle    String?
  releaseDate DateTime @map("release_date") @db.Date
  pages       Int
  publisherId String   @map("publisher_id") @db.Uuid
  slug        String   @unique

  coverImage    Image?         @relation("cover_for")
  previewImages Image[]        @relation("preview_for")
  tags          Tag[]          @relation("books_tags")
  contributions Contribution[]
  links         Link[]
  publisher     Publisher      @relation(fields: [publisherId], references: [id], onDelete: Restrict)

  @@map("books")
}

model Publisher {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @map("updated_at")
  name           String
  website        String?
  genericContact String?  @map("generic_contact")
  directContact  String?  @map("direct_contact")
  instagram      String?
  imprint        String?
  slug           String   @unique

  books Book[]
  logo  Image? @relation("publisher_logo")

  @@map("publishers")
}

model Tag {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  name      String   @unique

  books Book[] @relation("books_tags")

  @@map("tags")
}
