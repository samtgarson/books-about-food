// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "views"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id") @db.Uuid
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum UserRole {
  user
  admin
  waitlist
}

model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @updatedAt @map("updated_at")
  image         String?
  role          UserRole  @default(user)
  accounts      Account[]
  sessions      Session[]

  publisherId String?    @unique @map("publisher_id") @db.Uuid
  publisher   Publisher? @relation("publisher", fields: [publisherId], references: [id])

  profile        Profile?
  favourite      Favourite[]
  claims         Claim[]
  pitches        Pitch[]
  submittedBooks Book[]      @relation("submitted_books")

  @@map("users")
}

model Image {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  path           String   @unique
  width          Int
  height         Int
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at")
  caption        String?
  coverForId     String?  @unique @map("cover_for_id") @db.Uuid
  previewForId   String?  @map("preview_for_id") @db.Uuid
  publisherId    String?  @unique @map("publisher_id") @db.Uuid
  profileId      String?  @unique @map("profile_id") @db.Uuid
  placeholderUrl String?  @map("placeholder_url")

  // Prisma doesn't support polymorphic relations yet so some of these will always be null
  coverFor   Book?      @relation("cover_for", fields: [coverForId], references: [id])
  previewFor Book?      @relation("preview_for", fields: [previewForId], references: [id])
  publisher  Publisher? @relation("publisher_logo", fields: [publisherId], references: [id])
  profile    Profile?   @relation("profile_for", fields: [profileId], references: [id])

  @@map("images")
}

model Profile {
  id                      String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt               DateTime  @default(now()) @map("created_at")
  updatedAt               DateTime  @default(now()) @updatedAt @map("updated_at")
  userId                  String?   @unique @map("user_id") @db.Uuid
  name                    String    @unique
  location                String?
  website                 String?
  instagram               String?
  slug                    String    @unique
  description             String?
  mostRecentlyPublishedOn DateTime? @map("most_recently_published_on") @db.Date
  jobTitle                String?   @map("job_title")
  hiddenCollaborators     String[]  @default([]) @map("hidden_collaborators")

  user          User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
  contributions Contribution[]
  favourite     Favourite[]
  avatar        Image?            @relation("profile_for")
  claims        Claim[]
  authoredBooks Book[]            @relation("authored_books")
  features      FeaturedProfile[]

  @@map("profiles")
}

model Job {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  name      String   @unique
  featured  Boolean  @default(true)

  contributions Contribution[]

  @@map("jobs")
}

model Contribution {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  profileId String   @map("profile_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  bookId    String   @map("book_id") @db.Uuid
  jobId     String   @map("job_id") @db.Uuid
  tag       String?
  hidden    Boolean  @default(false)

  job     Job     @relation(fields: [jobId], references: [id])
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  book    Book    @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@unique([profileId, bookId, jobId])
  @@map("contributions")
}

model Link {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  bookId    String   @map("book_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  url       String
  site      String

  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@map("links")
}

enum BookStatus {
  draft
  inReview
  published
}

model Book {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @default(now()) @map("updated_at")
  title         String
  subtitle      String?
  releaseDate   DateTime?  @map("release_date") @db.Date
  pages         Int?
  publisherId   String?    @map("publisher_id") @db.Uuid
  slug          String     @unique
  status        BookStatus @default(draft)
  submitterId   String?    @map("submitter_id") @db.Uuid
  googleBooksId String?    @unique @map("google_books_id")

  coverImage    Image?         @relation("cover_for")
  previewImages Image[]        @relation("preview_for")
  tags          Tag[]          @relation("books_tags")
  contributions Contribution[]
  links         Link[]
  publisher     Publisher?     @relation(fields: [publisherId], references: [id], onDelete: Restrict)
  features      Feature[]
  submitter     User?          @relation("submitted_books", fields: [submitterId], references: [id])
  authors       Profile[]      @relation("authored_books")

  @@map("books")
}

model Publisher {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at")
  name           String   @unique
  website        String?
  genericContact String?  @map("generic_contact")
  directContact  String?  @map("direct_contact")
  instagram      String?
  imprint        String?
  slug           String   @unique

  books Book[]
  logo  Image? @relation("publisher_logo")
  user  User?  @relation("publisher")

  @@map("publishers")
}

model Tag {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  name      String   @unique

  books Book[] @relation("books_tags")

  @@map("tags")
}

model Favourite {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  profileId String   @map("profile_id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([profileId, userId])
  @@map("favourites")
}

model Feature {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at")
  bookId      String    @map("book_id") @db.Uuid
  tagLine     String?   @map("tag_line")
  until       DateTime? @db.Date
  description String?

  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@map("features")
}

model FeaturedProfile {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  profileId String    @unique @map("profile_id") @db.Uuid
  until     DateTime? @db.Date

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@map("featured_profiles")
}

model Claim {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @default(now()) @updatedAt @map("updated_at")
  profileId  String    @map("profile_id") @db.Uuid
  secret     String
  userId     String    @map("user_id") @db.Uuid
  approvedAt DateTime? @map("approved_at") @db.Date

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, profileId])
  @@map("claims")
}

model Pitch {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at")
  description String
  viewCount   Int      @default(0) @map("view_count")

  authorId String @map("author_id") @db.Uuid
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("pitches")
}

enum SearchResultType {
  book
  author
  contributor
  publisher
}

view SearchResult {
  id          String           @unique
  name        String
  description String?
  image       Json?
  type        SearchResultType
  slug        String

  @@map("search_results")
}
