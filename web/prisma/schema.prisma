// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id") @db.Uuid
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  createdAt     DateTime  @default(now()) @map("created_at")
  image         String?
  accounts      Account[]
  sessions      Session[]

  profile Profile?

  @@map("users")
}

model Profile {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String?  @unique @map("user_id") @db.Uuid
  name      String
  location  String?
  website   String?
  instagram String?
  roles     String[]

  user          User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  contributions Contribution[]
}

model Job {
  id     String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId String? @map("user_id") @db.Uuid
  name   String

  contributions Contribution[]
}

model Contribution {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  profileId String   @map("profile_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  job_id    String?  @map("job_id") @db.Uuid
  book_id   String   @map("book_id") @db.Uuid

  job     Job?    @relation(fields: [job_id], references: [id], onDelete: SetNull)
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  book    Book    @relation(fields: [book_id], references: [id], onDelete: Cascade)
}

model Link {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  book_id   String   @map("book_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  url       String
  site      String

  book Book @relation(fields: [book_id], references: [id], onDelete: Cascade)
}

model Book {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String
  subtitle    String?
  publishedOn DateTime @map("published_on")
  pages       Int
  coverUrl    String   @map("cover_url")
  imageUrls   String[] @map("image_urls")
  publisherId String   @map("publisher_id") @db.Uuid

  contributions Contribution[]
  links         Link[]
  publisher     Publisher      @relation(fields: [publisherId], references: [id], onDelete: Restrict)
}

model Publisher {
  id             String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String
  website        String?
  genericContact String? @map("generic_contact")
  directContact  String? @map("direct_contact")
  instagram      String?
  imprint        String?
  logoUrl        String? @map("logo_url")

  books Book[]
}
